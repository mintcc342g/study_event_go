// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"study-event-go/ent/charmcreator"
	"study-event-go/ent/predicate"
	"study-event-go/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CharmCreatorUpdate is the builder for updating CharmCreator entities.
type CharmCreatorUpdate struct {
	config
	hooks    []Hook
	mutation *CharmCreatorMutation
}

// Where appends a list predicates to the CharmCreatorUpdate builder.
func (ccu *CharmCreatorUpdate) Where(ps ...predicate.CharmCreator) *CharmCreatorUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// SetCreatedAt sets the "created_at" field.
func (ccu *CharmCreatorUpdate) SetCreatedAt(t time.Time) *CharmCreatorUpdate {
	ccu.mutation.SetCreatedAt(t)
	return ccu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccu *CharmCreatorUpdate) SetNillableCreatedAt(t *time.Time) *CharmCreatorUpdate {
	if t != nil {
		ccu.SetCreatedAt(*t)
	}
	return ccu
}

// SetUpdatedAt sets the "updated_at" field.
func (ccu *CharmCreatorUpdate) SetUpdatedAt(t time.Time) *CharmCreatorUpdate {
	ccu.mutation.SetUpdatedAt(t)
	return ccu
}

// SetDeletedAt sets the "deleted_at" field.
func (ccu *CharmCreatorUpdate) SetDeletedAt(t time.Time) *CharmCreatorUpdate {
	ccu.mutation.SetDeletedAt(t)
	return ccu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccu *CharmCreatorUpdate) SetNillableDeletedAt(t *time.Time) *CharmCreatorUpdate {
	if t != nil {
		ccu.SetDeletedAt(*t)
	}
	return ccu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccu *CharmCreatorUpdate) ClearDeletedAt() *CharmCreatorUpdate {
	ccu.mutation.ClearDeletedAt()
	return ccu
}

// SetName sets the "name" field.
func (ccu *CharmCreatorUpdate) SetName(s string) *CharmCreatorUpdate {
	ccu.mutation.SetName(s)
	return ccu
}

// SetType sets the "type" field.
func (ccu *CharmCreatorUpdate) SetType(tt types.ArsenalType) *CharmCreatorUpdate {
	ccu.mutation.ResetType()
	ccu.mutation.SetType(tt)
	return ccu
}

// AddType adds tt to the "type" field.
func (ccu *CharmCreatorUpdate) AddType(tt types.ArsenalType) *CharmCreatorUpdate {
	ccu.mutation.AddType(tt)
	return ccu
}

// Mutation returns the CharmCreatorMutation object of the builder.
func (ccu *CharmCreatorUpdate) Mutation() *CharmCreatorMutation {
	return ccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CharmCreatorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ccu.defaults()
	if len(ccu.hooks) == 0 {
		if err = ccu.check(); err != nil {
			return 0, err
		}
		affected, err = ccu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharmCreatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccu.check(); err != nil {
				return 0, err
			}
			ccu.mutation = mutation
			affected, err = ccu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ccu.hooks) - 1; i >= 0; i-- {
			if ccu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CharmCreatorUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CharmCreatorUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CharmCreatorUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccu *CharmCreatorUpdate) defaults() {
	if _, ok := ccu.mutation.UpdatedAt(); !ok {
		v := charmcreator.UpdateDefaultUpdatedAt()
		ccu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccu *CharmCreatorUpdate) check() error {
	if v, ok := ccu.mutation.Name(); ok {
		if err := charmcreator.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ccu *CharmCreatorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   charmcreator.Table,
			Columns: charmcreator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: charmcreator.FieldID,
			},
		},
	}
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmcreator.FieldCreatedAt,
		})
	}
	if value, ok := ccu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmcreator.FieldUpdatedAt,
		})
	}
	if value, ok := ccu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmcreator.FieldDeletedAt,
		})
	}
	if ccu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: charmcreator.FieldDeletedAt,
		})
	}
	if value, ok := ccu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: charmcreator.FieldName,
		})
	}
	if value, ok := ccu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmcreator.FieldType,
		})
	}
	if value, ok := ccu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmcreator.FieldType,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{charmcreator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CharmCreatorUpdateOne is the builder for updating a single CharmCreator entity.
type CharmCreatorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharmCreatorMutation
}

// SetCreatedAt sets the "created_at" field.
func (ccuo *CharmCreatorUpdateOne) SetCreatedAt(t time.Time) *CharmCreatorUpdateOne {
	ccuo.mutation.SetCreatedAt(t)
	return ccuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccuo *CharmCreatorUpdateOne) SetNillableCreatedAt(t *time.Time) *CharmCreatorUpdateOne {
	if t != nil {
		ccuo.SetCreatedAt(*t)
	}
	return ccuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ccuo *CharmCreatorUpdateOne) SetUpdatedAt(t time.Time) *CharmCreatorUpdateOne {
	ccuo.mutation.SetUpdatedAt(t)
	return ccuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ccuo *CharmCreatorUpdateOne) SetDeletedAt(t time.Time) *CharmCreatorUpdateOne {
	ccuo.mutation.SetDeletedAt(t)
	return ccuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccuo *CharmCreatorUpdateOne) SetNillableDeletedAt(t *time.Time) *CharmCreatorUpdateOne {
	if t != nil {
		ccuo.SetDeletedAt(*t)
	}
	return ccuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ccuo *CharmCreatorUpdateOne) ClearDeletedAt() *CharmCreatorUpdateOne {
	ccuo.mutation.ClearDeletedAt()
	return ccuo
}

// SetName sets the "name" field.
func (ccuo *CharmCreatorUpdateOne) SetName(s string) *CharmCreatorUpdateOne {
	ccuo.mutation.SetName(s)
	return ccuo
}

// SetType sets the "type" field.
func (ccuo *CharmCreatorUpdateOne) SetType(tt types.ArsenalType) *CharmCreatorUpdateOne {
	ccuo.mutation.ResetType()
	ccuo.mutation.SetType(tt)
	return ccuo
}

// AddType adds tt to the "type" field.
func (ccuo *CharmCreatorUpdateOne) AddType(tt types.ArsenalType) *CharmCreatorUpdateOne {
	ccuo.mutation.AddType(tt)
	return ccuo
}

// Mutation returns the CharmCreatorMutation object of the builder.
func (ccuo *CharmCreatorUpdateOne) Mutation() *CharmCreatorMutation {
	return ccuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CharmCreatorUpdateOne) Select(field string, fields ...string) *CharmCreatorUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CharmCreator entity.
func (ccuo *CharmCreatorUpdateOne) Save(ctx context.Context) (*CharmCreator, error) {
	var (
		err  error
		node *CharmCreator
	)
	ccuo.defaults()
	if len(ccuo.hooks) == 0 {
		if err = ccuo.check(); err != nil {
			return nil, err
		}
		node, err = ccuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharmCreatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccuo.check(); err != nil {
				return nil, err
			}
			ccuo.mutation = mutation
			node, err = ccuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ccuo.hooks) - 1; i >= 0; i-- {
			if ccuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CharmCreatorUpdateOne) SaveX(ctx context.Context) *CharmCreator {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CharmCreatorUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CharmCreatorUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccuo *CharmCreatorUpdateOne) defaults() {
	if _, ok := ccuo.mutation.UpdatedAt(); !ok {
		v := charmcreator.UpdateDefaultUpdatedAt()
		ccuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccuo *CharmCreatorUpdateOne) check() error {
	if v, ok := ccuo.mutation.Name(); ok {
		if err := charmcreator.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (ccuo *CharmCreatorUpdateOne) sqlSave(ctx context.Context) (_node *CharmCreator, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   charmcreator.Table,
			Columns: charmcreator.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: charmcreator.FieldID,
			},
		},
	}
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CharmCreator.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, charmcreator.FieldID)
		for _, f := range fields {
			if !charmcreator.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != charmcreator.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmcreator.FieldCreatedAt,
		})
	}
	if value, ok := ccuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmcreator.FieldUpdatedAt,
		})
	}
	if value, ok := ccuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmcreator.FieldDeletedAt,
		})
	}
	if ccuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: charmcreator.FieldDeletedAt,
		})
	}
	if value, ok := ccuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: charmcreator.FieldName,
		})
	}
	if value, ok := ccuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmcreator.FieldType,
		})
	}
	if value, ok := ccuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmcreator.FieldType,
		})
	}
	_node = &CharmCreator{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{charmcreator.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
