// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-event-go/ent/garden"
	"study-event-go/types"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Garden is the model entity for the Garden schema.
type Garden struct {
	config `json:"-"`
	// ID of the ent.
	ID types.GardenID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// MentorshipID holds the value of the "mentorship_id" field.
	MentorshipID types.MentorshipID `json:"mentorship_id,omitempty"`
	// LegionSystem holds the value of the "legion_system" field.
	LegionSystem types.LegionSystem `json:"legion_system,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Garden) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case garden.FieldID, garden.FieldMentorshipID, garden.FieldLegionSystem:
			values[i] = new(sql.NullInt64)
		case garden.FieldName, garden.FieldLocation:
			values[i] = new(sql.NullString)
		case garden.FieldCreatedAt, garden.FieldUpdatedAt, garden.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Garden", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Garden fields.
func (ga *Garden) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case garden.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = types.GardenID(value.Int64)
		case garden.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		case garden.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ga.UpdatedAt = value.Time
			}
		case garden.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ga.DeletedAt = new(time.Time)
				*ga.DeletedAt = value.Time
			}
		case garden.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ga.Name = value.String
			}
		case garden.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				ga.Location = value.String
			}
		case garden.FieldMentorshipID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mentorship_id", values[i])
			} else if value.Valid {
				ga.MentorshipID = types.MentorshipID(value.Int64)
			}
		case garden.FieldLegionSystem:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field legion_system", values[i])
			} else if value.Valid {
				ga.LegionSystem = types.LegionSystem(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Garden.
// Note that you need to call Garden.Unwrap() before calling this method if this Garden
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Garden) Update() *GardenUpdateOne {
	return (&GardenClient{config: ga.config}).UpdateOne(ga)
}

// Unwrap unwraps the Garden entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Garden) Unwrap() *Garden {
	tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Garden is not a transactional entity")
	}
	ga.config.driver = tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Garden) String() string {
	var builder strings.Builder
	builder.WriteString("Garden(")
	builder.WriteString(fmt.Sprintf("id=%v", ga.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ga.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ga.UpdatedAt.Format(time.ANSIC))
	if v := ga.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", name=")
	builder.WriteString(ga.Name)
	builder.WriteString(", location=")
	builder.WriteString(ga.Location)
	builder.WriteString(", mentorship_id=")
	builder.WriteString(fmt.Sprintf("%v", ga.MentorshipID))
	builder.WriteString(", legion_system=")
	builder.WriteString(fmt.Sprintf("%v", ga.LegionSystem))
	builder.WriteByte(')')
	return builder.String()
}

// Gardens is a parsable slice of Garden.
type Gardens []*Garden

func (ga Gardens) config(cfg config) {
	for _i := range ga {
		ga[_i].config = cfg
	}
}
