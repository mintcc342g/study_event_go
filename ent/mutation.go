// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"study-event-go/ent/garden"
	"study-event-go/ent/mentorship"
	"study-event-go/ent/predicate"
	"study-event-go/types"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGarden     = "Garden"
	TypeMentorship = "Mentorship"
)

// GardenMutation represents an operation that mutates the Garden nodes in the graph.
type GardenMutation struct {
	config
	op                Op
	typ               string
	id                *types.GardenID
	name              *string
	location          *string
	clearedFields     map[string]struct{}
	mentorship        *types.MentorshipID
	clearedmentorship bool
	done              bool
	oldValue          func(context.Context) (*Garden, error)
	predicates        []predicate.Garden
}

var _ ent.Mutation = (*GardenMutation)(nil)

// gardenOption allows management of the mutation configuration using functional options.
type gardenOption func(*GardenMutation)

// newGardenMutation creates new mutation for the Garden entity.
func newGardenMutation(c config, op Op, opts ...gardenOption) *GardenMutation {
	m := &GardenMutation{
		config:        c,
		op:            op,
		typ:           TypeGarden,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGardenID sets the ID field of the mutation.
func withGardenID(id types.GardenID) gardenOption {
	return func(m *GardenMutation) {
		var (
			err   error
			once  sync.Once
			value *Garden
		)
		m.oldValue = func(ctx context.Context) (*Garden, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Garden.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGarden sets the old Garden of the mutation.
func withGarden(node *Garden) gardenOption {
	return func(m *GardenMutation) {
		m.oldValue = func(context.Context) (*Garden, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GardenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GardenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Garden entities.
func (m *GardenMutation) SetID(id types.GardenID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GardenMutation) ID() (id types.GardenID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *GardenMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GardenMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Garden entity.
// If the Garden object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GardenMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GardenMutation) ResetName() {
	m.name = nil
}

// SetLocation sets the "location" field.
func (m *GardenMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *GardenMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Garden entity.
// If the Garden object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GardenMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *GardenMutation) ResetLocation() {
	m.location = nil
}

// SetMentorshipID sets the "mentorship_id" field.
func (m *GardenMutation) SetMentorshipID(ti types.MentorshipID) {
	m.mentorship = &ti
}

// MentorshipID returns the value of the "mentorship_id" field in the mutation.
func (m *GardenMutation) MentorshipID() (r types.MentorshipID, exists bool) {
	v := m.mentorship
	if v == nil {
		return
	}
	return *v, true
}

// OldMentorshipID returns the old "mentorship_id" field's value of the Garden entity.
// If the Garden object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GardenMutation) OldMentorshipID(ctx context.Context) (v *types.MentorshipID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMentorshipID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMentorshipID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMentorshipID: %w", err)
	}
	return oldValue.MentorshipID, nil
}

// ClearMentorshipID clears the value of the "mentorship_id" field.
func (m *GardenMutation) ClearMentorshipID() {
	m.mentorship = nil
	m.clearedFields[garden.FieldMentorshipID] = struct{}{}
}

// MentorshipIDCleared returns if the "mentorship_id" field was cleared in this mutation.
func (m *GardenMutation) MentorshipIDCleared() bool {
	_, ok := m.clearedFields[garden.FieldMentorshipID]
	return ok
}

// ResetMentorshipID resets all changes to the "mentorship_id" field.
func (m *GardenMutation) ResetMentorshipID() {
	m.mentorship = nil
	delete(m.clearedFields, garden.FieldMentorshipID)
}

// ClearMentorship clears the "mentorship" edge to the Mentorship entity.
func (m *GardenMutation) ClearMentorship() {
	m.clearedmentorship = true
}

// MentorshipCleared reports if the "mentorship" edge to the Mentorship entity was cleared.
func (m *GardenMutation) MentorshipCleared() bool {
	return m.MentorshipIDCleared() || m.clearedmentorship
}

// MentorshipIDs returns the "mentorship" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MentorshipID instead. It exists only for internal usage by the builders.
func (m *GardenMutation) MentorshipIDs() (ids []types.MentorshipID) {
	if id := m.mentorship; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMentorship resets all changes to the "mentorship" edge.
func (m *GardenMutation) ResetMentorship() {
	m.mentorship = nil
	m.clearedmentorship = false
}

// Where appends a list predicates to the GardenMutation builder.
func (m *GardenMutation) Where(ps ...predicate.Garden) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GardenMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Garden).
func (m *GardenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GardenMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, garden.FieldName)
	}
	if m.location != nil {
		fields = append(fields, garden.FieldLocation)
	}
	if m.mentorship != nil {
		fields = append(fields, garden.FieldMentorshipID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GardenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case garden.FieldName:
		return m.Name()
	case garden.FieldLocation:
		return m.Location()
	case garden.FieldMentorshipID:
		return m.MentorshipID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GardenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case garden.FieldName:
		return m.OldName(ctx)
	case garden.FieldLocation:
		return m.OldLocation(ctx)
	case garden.FieldMentorshipID:
		return m.OldMentorshipID(ctx)
	}
	return nil, fmt.Errorf("unknown Garden field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GardenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case garden.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case garden.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case garden.FieldMentorshipID:
		v, ok := value.(types.MentorshipID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMentorshipID(v)
		return nil
	}
	return fmt.Errorf("unknown Garden field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GardenMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GardenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GardenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Garden numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GardenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(garden.FieldMentorshipID) {
		fields = append(fields, garden.FieldMentorshipID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GardenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GardenMutation) ClearField(name string) error {
	switch name {
	case garden.FieldMentorshipID:
		m.ClearMentorshipID()
		return nil
	}
	return fmt.Errorf("unknown Garden nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GardenMutation) ResetField(name string) error {
	switch name {
	case garden.FieldName:
		m.ResetName()
		return nil
	case garden.FieldLocation:
		m.ResetLocation()
		return nil
	case garden.FieldMentorshipID:
		m.ResetMentorshipID()
		return nil
	}
	return fmt.Errorf("unknown Garden field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GardenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.mentorship != nil {
		edges = append(edges, garden.EdgeMentorship)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GardenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case garden.EdgeMentorship:
		if id := m.mentorship; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GardenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GardenMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GardenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmentorship {
		edges = append(edges, garden.EdgeMentorship)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GardenMutation) EdgeCleared(name string) bool {
	switch name {
	case garden.EdgeMentorship:
		return m.clearedmentorship
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GardenMutation) ClearEdge(name string) error {
	switch name {
	case garden.EdgeMentorship:
		m.ClearMentorship()
		return nil
	}
	return fmt.Errorf("unknown Garden unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GardenMutation) ResetEdge(name string) error {
	switch name {
	case garden.EdgeMentorship:
		m.ResetMentorship()
		return nil
	}
	return fmt.Errorf("unknown Garden edge %s", name)
}

// MentorshipMutation represents an operation that mutates the Mentorship nodes in the graph.
type MentorshipMutation struct {
	config
	op            Op
	typ           string
	id            *types.MentorshipID
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Mentorship, error)
	predicates    []predicate.Mentorship
}

var _ ent.Mutation = (*MentorshipMutation)(nil)

// mentorshipOption allows management of the mutation configuration using functional options.
type mentorshipOption func(*MentorshipMutation)

// newMentorshipMutation creates new mutation for the Mentorship entity.
func newMentorshipMutation(c config, op Op, opts ...mentorshipOption) *MentorshipMutation {
	m := &MentorshipMutation{
		config:        c,
		op:            op,
		typ:           TypeMentorship,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMentorshipID sets the ID field of the mutation.
func withMentorshipID(id types.MentorshipID) mentorshipOption {
	return func(m *MentorshipMutation) {
		var (
			err   error
			once  sync.Once
			value *Mentorship
		)
		m.oldValue = func(ctx context.Context) (*Mentorship, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mentorship.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMentorship sets the old Mentorship of the mutation.
func withMentorship(node *Mentorship) mentorshipOption {
	return func(m *MentorshipMutation) {
		m.oldValue = func(context.Context) (*Mentorship, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MentorshipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MentorshipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Mentorship entities.
func (m *MentorshipMutation) SetID(id types.MentorshipID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MentorshipMutation) ID() (id types.MentorshipID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *MentorshipMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MentorshipMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Mentorship entity.
// If the Mentorship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MentorshipMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MentorshipMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MentorshipMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MentorshipMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Mentorship entity.
// If the Mentorship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MentorshipMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MentorshipMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *MentorshipMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *MentorshipMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Mentorship entity.
// If the Mentorship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MentorshipMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *MentorshipMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[mentorship.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *MentorshipMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[mentorship.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *MentorshipMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, mentorship.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *MentorshipMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MentorshipMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Mentorship entity.
// If the Mentorship object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MentorshipMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MentorshipMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the MentorshipMutation builder.
func (m *MentorshipMutation) Where(ps ...predicate.Mentorship) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MentorshipMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Mentorship).
func (m *MentorshipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MentorshipMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, mentorship.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, mentorship.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, mentorship.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, mentorship.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MentorshipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mentorship.FieldCreatedAt:
		return m.CreatedAt()
	case mentorship.FieldUpdatedAt:
		return m.UpdatedAt()
	case mentorship.FieldDeletedAt:
		return m.DeletedAt()
	case mentorship.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MentorshipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mentorship.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case mentorship.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case mentorship.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case mentorship.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Mentorship field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MentorshipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mentorship.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case mentorship.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case mentorship.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case mentorship.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Mentorship field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MentorshipMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MentorshipMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MentorshipMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Mentorship numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MentorshipMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mentorship.FieldDeletedAt) {
		fields = append(fields, mentorship.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MentorshipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MentorshipMutation) ClearField(name string) error {
	switch name {
	case mentorship.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Mentorship nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MentorshipMutation) ResetField(name string) error {
	switch name {
	case mentorship.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case mentorship.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case mentorship.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case mentorship.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Mentorship field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MentorshipMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MentorshipMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MentorshipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MentorshipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MentorshipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MentorshipMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MentorshipMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Mentorship unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MentorshipMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Mentorship edge %s", name)
}
