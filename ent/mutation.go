// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"study-event-go/ent/garden"
	"study-event-go/ent/mentorshipsystem"
	"study-event-go/ent/predicate"
	"study-event-go/types"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGarden           = "Garden"
	TypeMentorshipSystem = "MentorshipSystem"
)

// GardenMutation represents an operation that mutates the Garden nodes in the graph.
type GardenMutation struct {
	config
	op                       Op
	typ                      string
	id                       *types.GardenID
	name                     *string
	location                 *string
	clearedFields            map[string]struct{}
	mentorship_system        *types.MentorshipSystemID
	clearedmentorship_system bool
	done                     bool
	oldValue                 func(context.Context) (*Garden, error)
	predicates               []predicate.Garden
}

var _ ent.Mutation = (*GardenMutation)(nil)

// gardenOption allows management of the mutation configuration using functional options.
type gardenOption func(*GardenMutation)

// newGardenMutation creates new mutation for the Garden entity.
func newGardenMutation(c config, op Op, opts ...gardenOption) *GardenMutation {
	m := &GardenMutation{
		config:        c,
		op:            op,
		typ:           TypeGarden,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGardenID sets the ID field of the mutation.
func withGardenID(id types.GardenID) gardenOption {
	return func(m *GardenMutation) {
		var (
			err   error
			once  sync.Once
			value *Garden
		)
		m.oldValue = func(ctx context.Context) (*Garden, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Garden.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGarden sets the old Garden of the mutation.
func withGarden(node *Garden) gardenOption {
	return func(m *GardenMutation) {
		m.oldValue = func(context.Context) (*Garden, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GardenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GardenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Garden entities.
func (m *GardenMutation) SetID(id types.GardenID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GardenMutation) ID() (id types.GardenID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *GardenMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GardenMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Garden entity.
// If the Garden object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GardenMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GardenMutation) ResetName() {
	m.name = nil
}

// SetLocation sets the "location" field.
func (m *GardenMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *GardenMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Garden entity.
// If the Garden object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GardenMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *GardenMutation) ResetLocation() {
	m.location = nil
}

// SetMentorshipSystemID sets the "mentorship_system_id" field.
func (m *GardenMutation) SetMentorshipSystemID(tsi types.MentorshipSystemID) {
	m.mentorship_system = &tsi
}

// MentorshipSystemID returns the value of the "mentorship_system_id" field in the mutation.
func (m *GardenMutation) MentorshipSystemID() (r types.MentorshipSystemID, exists bool) {
	v := m.mentorship_system
	if v == nil {
		return
	}
	return *v, true
}

// OldMentorshipSystemID returns the old "mentorship_system_id" field's value of the Garden entity.
// If the Garden object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GardenMutation) OldMentorshipSystemID(ctx context.Context) (v *types.MentorshipSystemID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMentorshipSystemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMentorshipSystemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMentorshipSystemID: %w", err)
	}
	return oldValue.MentorshipSystemID, nil
}

// ClearMentorshipSystemID clears the value of the "mentorship_system_id" field.
func (m *GardenMutation) ClearMentorshipSystemID() {
	m.mentorship_system = nil
	m.clearedFields[garden.FieldMentorshipSystemID] = struct{}{}
}

// MentorshipSystemIDCleared returns if the "mentorship_system_id" field was cleared in this mutation.
func (m *GardenMutation) MentorshipSystemIDCleared() bool {
	_, ok := m.clearedFields[garden.FieldMentorshipSystemID]
	return ok
}

// ResetMentorshipSystemID resets all changes to the "mentorship_system_id" field.
func (m *GardenMutation) ResetMentorshipSystemID() {
	m.mentorship_system = nil
	delete(m.clearedFields, garden.FieldMentorshipSystemID)
}

// ClearMentorshipSystem clears the "mentorship_system" edge to the MentorshipSystem entity.
func (m *GardenMutation) ClearMentorshipSystem() {
	m.clearedmentorship_system = true
}

// MentorshipSystemCleared reports if the "mentorship_system" edge to the MentorshipSystem entity was cleared.
func (m *GardenMutation) MentorshipSystemCleared() bool {
	return m.MentorshipSystemIDCleared() || m.clearedmentorship_system
}

// MentorshipSystemIDs returns the "mentorship_system" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MentorshipSystemID instead. It exists only for internal usage by the builders.
func (m *GardenMutation) MentorshipSystemIDs() (ids []types.MentorshipSystemID) {
	if id := m.mentorship_system; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMentorshipSystem resets all changes to the "mentorship_system" edge.
func (m *GardenMutation) ResetMentorshipSystem() {
	m.mentorship_system = nil
	m.clearedmentorship_system = false
}

// Where appends a list predicates to the GardenMutation builder.
func (m *GardenMutation) Where(ps ...predicate.Garden) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GardenMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Garden).
func (m *GardenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GardenMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, garden.FieldName)
	}
	if m.location != nil {
		fields = append(fields, garden.FieldLocation)
	}
	if m.mentorship_system != nil {
		fields = append(fields, garden.FieldMentorshipSystemID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GardenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case garden.FieldName:
		return m.Name()
	case garden.FieldLocation:
		return m.Location()
	case garden.FieldMentorshipSystemID:
		return m.MentorshipSystemID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GardenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case garden.FieldName:
		return m.OldName(ctx)
	case garden.FieldLocation:
		return m.OldLocation(ctx)
	case garden.FieldMentorshipSystemID:
		return m.OldMentorshipSystemID(ctx)
	}
	return nil, fmt.Errorf("unknown Garden field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GardenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case garden.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case garden.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case garden.FieldMentorshipSystemID:
		v, ok := value.(types.MentorshipSystemID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMentorshipSystemID(v)
		return nil
	}
	return fmt.Errorf("unknown Garden field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GardenMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GardenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GardenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Garden numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GardenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(garden.FieldMentorshipSystemID) {
		fields = append(fields, garden.FieldMentorshipSystemID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GardenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GardenMutation) ClearField(name string) error {
	switch name {
	case garden.FieldMentorshipSystemID:
		m.ClearMentorshipSystemID()
		return nil
	}
	return fmt.Errorf("unknown Garden nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GardenMutation) ResetField(name string) error {
	switch name {
	case garden.FieldName:
		m.ResetName()
		return nil
	case garden.FieldLocation:
		m.ResetLocation()
		return nil
	case garden.FieldMentorshipSystemID:
		m.ResetMentorshipSystemID()
		return nil
	}
	return fmt.Errorf("unknown Garden field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GardenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.mentorship_system != nil {
		edges = append(edges, garden.EdgeMentorshipSystem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GardenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case garden.EdgeMentorshipSystem:
		if id := m.mentorship_system; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GardenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GardenMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GardenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmentorship_system {
		edges = append(edges, garden.EdgeMentorshipSystem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GardenMutation) EdgeCleared(name string) bool {
	switch name {
	case garden.EdgeMentorshipSystem:
		return m.clearedmentorship_system
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GardenMutation) ClearEdge(name string) error {
	switch name {
	case garden.EdgeMentorshipSystem:
		m.ClearMentorshipSystem()
		return nil
	}
	return fmt.Errorf("unknown Garden unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GardenMutation) ResetEdge(name string) error {
	switch name {
	case garden.EdgeMentorshipSystem:
		m.ResetMentorshipSystem()
		return nil
	}
	return fmt.Errorf("unknown Garden edge %s", name)
}

// MentorshipSystemMutation represents an operation that mutates the MentorshipSystem nodes in the graph.
type MentorshipSystemMutation struct {
	config
	op            Op
	typ           string
	id            *types.MentorshipSystemID
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*MentorshipSystem, error)
	predicates    []predicate.MentorshipSystem
}

var _ ent.Mutation = (*MentorshipSystemMutation)(nil)

// mentorshipsystemOption allows management of the mutation configuration using functional options.
type mentorshipsystemOption func(*MentorshipSystemMutation)

// newMentorshipSystemMutation creates new mutation for the MentorshipSystem entity.
func newMentorshipSystemMutation(c config, op Op, opts ...mentorshipsystemOption) *MentorshipSystemMutation {
	m := &MentorshipSystemMutation{
		config:        c,
		op:            op,
		typ:           TypeMentorshipSystem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMentorshipSystemID sets the ID field of the mutation.
func withMentorshipSystemID(id types.MentorshipSystemID) mentorshipsystemOption {
	return func(m *MentorshipSystemMutation) {
		var (
			err   error
			once  sync.Once
			value *MentorshipSystem
		)
		m.oldValue = func(ctx context.Context) (*MentorshipSystem, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MentorshipSystem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMentorshipSystem sets the old MentorshipSystem of the mutation.
func withMentorshipSystem(node *MentorshipSystem) mentorshipsystemOption {
	return func(m *MentorshipSystemMutation) {
		m.oldValue = func(context.Context) (*MentorshipSystem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MentorshipSystemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MentorshipSystemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MentorshipSystem entities.
func (m *MentorshipSystemMutation) SetID(id types.MentorshipSystemID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MentorshipSystemMutation) ID() (id types.MentorshipSystemID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *MentorshipSystemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MentorshipSystemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MentorshipSystem entity.
// If the MentorshipSystem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MentorshipSystemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MentorshipSystemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MentorshipSystemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MentorshipSystemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MentorshipSystem entity.
// If the MentorshipSystem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MentorshipSystemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MentorshipSystemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *MentorshipSystemMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *MentorshipSystemMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the MentorshipSystem entity.
// If the MentorshipSystem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MentorshipSystemMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *MentorshipSystemMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[mentorshipsystem.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *MentorshipSystemMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[mentorshipsystem.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *MentorshipSystemMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, mentorshipsystem.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *MentorshipSystemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MentorshipSystemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MentorshipSystem entity.
// If the MentorshipSystem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MentorshipSystemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MentorshipSystemMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the MentorshipSystemMutation builder.
func (m *MentorshipSystemMutation) Where(ps ...predicate.MentorshipSystem) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MentorshipSystemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MentorshipSystem).
func (m *MentorshipSystemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MentorshipSystemMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, mentorshipsystem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, mentorshipsystem.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, mentorshipsystem.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, mentorshipsystem.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MentorshipSystemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mentorshipsystem.FieldCreatedAt:
		return m.CreatedAt()
	case mentorshipsystem.FieldUpdatedAt:
		return m.UpdatedAt()
	case mentorshipsystem.FieldDeletedAt:
		return m.DeletedAt()
	case mentorshipsystem.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MentorshipSystemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mentorshipsystem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case mentorshipsystem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case mentorshipsystem.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case mentorshipsystem.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown MentorshipSystem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MentorshipSystemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mentorshipsystem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case mentorshipsystem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case mentorshipsystem.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case mentorshipsystem.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown MentorshipSystem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MentorshipSystemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MentorshipSystemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MentorshipSystemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MentorshipSystem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MentorshipSystemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mentorshipsystem.FieldDeletedAt) {
		fields = append(fields, mentorshipsystem.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MentorshipSystemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MentorshipSystemMutation) ClearField(name string) error {
	switch name {
	case mentorshipsystem.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown MentorshipSystem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MentorshipSystemMutation) ResetField(name string) error {
	switch name {
	case mentorshipsystem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case mentorshipsystem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case mentorshipsystem.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case mentorshipsystem.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown MentorshipSystem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MentorshipSystemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MentorshipSystemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MentorshipSystemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MentorshipSystemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MentorshipSystemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MentorshipSystemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MentorshipSystemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MentorshipSystem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MentorshipSystemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MentorshipSystem edge %s", name)
}
