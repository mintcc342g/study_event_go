// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"study-event-go/ent/migrate"
	"study-event-go/types"

	"study-event-go/ent/charm"
	"study-event-go/ent/charmcreator"
	"study-event-go/ent/charmmodel"
	"study-event-go/ent/garden"
	"study-event-go/ent/lily"
	"study-event-go/ent/lilyskill"
	"study-event-go/ent/mentorship"
	"study-event-go/ent/skill"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Charm is the client for interacting with the Charm builders.
	Charm *CharmClient
	// CharmCreator is the client for interacting with the CharmCreator builders.
	CharmCreator *CharmCreatorClient
	// CharmModel is the client for interacting with the CharmModel builders.
	CharmModel *CharmModelClient
	// Garden is the client for interacting with the Garden builders.
	Garden *GardenClient
	// Lily is the client for interacting with the Lily builders.
	Lily *LilyClient
	// LilySkill is the client for interacting with the LilySkill builders.
	LilySkill *LilySkillClient
	// Mentorship is the client for interacting with the Mentorship builders.
	Mentorship *MentorshipClient
	// Skill is the client for interacting with the Skill builders.
	Skill *SkillClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Charm = NewCharmClient(c.config)
	c.CharmCreator = NewCharmCreatorClient(c.config)
	c.CharmModel = NewCharmModelClient(c.config)
	c.Garden = NewGardenClient(c.config)
	c.Lily = NewLilyClient(c.config)
	c.LilySkill = NewLilySkillClient(c.config)
	c.Mentorship = NewMentorshipClient(c.config)
	c.Skill = NewSkillClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Charm:        NewCharmClient(cfg),
		CharmCreator: NewCharmCreatorClient(cfg),
		CharmModel:   NewCharmModelClient(cfg),
		Garden:       NewGardenClient(cfg),
		Lily:         NewLilyClient(cfg),
		LilySkill:    NewLilySkillClient(cfg),
		Mentorship:   NewMentorshipClient(cfg),
		Skill:        NewSkillClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:       cfg,
		Charm:        NewCharmClient(cfg),
		CharmCreator: NewCharmCreatorClient(cfg),
		CharmModel:   NewCharmModelClient(cfg),
		Garden:       NewGardenClient(cfg),
		Lily:         NewLilyClient(cfg),
		LilySkill:    NewLilySkillClient(cfg),
		Mentorship:   NewMentorshipClient(cfg),
		Skill:        NewSkillClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Charm.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Charm.Use(hooks...)
	c.CharmCreator.Use(hooks...)
	c.CharmModel.Use(hooks...)
	c.Garden.Use(hooks...)
	c.Lily.Use(hooks...)
	c.LilySkill.Use(hooks...)
	c.Mentorship.Use(hooks...)
	c.Skill.Use(hooks...)
}

// CharmClient is a client for the Charm schema.
type CharmClient struct {
	config
}

// NewCharmClient returns a client for the Charm from the given config.
func NewCharmClient(c config) *CharmClient {
	return &CharmClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `charm.Hooks(f(g(h())))`.
func (c *CharmClient) Use(hooks ...Hook) {
	c.hooks.Charm = append(c.hooks.Charm, hooks...)
}

// Create returns a create builder for Charm.
func (c *CharmClient) Create() *CharmCreate {
	mutation := newCharmMutation(c.config, OpCreate)
	return &CharmCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Charm entities.
func (c *CharmClient) CreateBulk(builders ...*CharmCreate) *CharmCreateBulk {
	return &CharmCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Charm.
func (c *CharmClient) Update() *CharmUpdate {
	mutation := newCharmMutation(c.config, OpUpdate)
	return &CharmUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharmClient) UpdateOne(ch *Charm) *CharmUpdateOne {
	mutation := newCharmMutation(c.config, OpUpdateOne, withCharm(ch))
	return &CharmUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharmClient) UpdateOneID(id types.CharmID) *CharmUpdateOne {
	mutation := newCharmMutation(c.config, OpUpdateOne, withCharmID(id))
	return &CharmUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Charm.
func (c *CharmClient) Delete() *CharmDelete {
	mutation := newCharmMutation(c.config, OpDelete)
	return &CharmDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CharmClient) DeleteOne(ch *Charm) *CharmDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CharmClient) DeleteOneID(id types.CharmID) *CharmDeleteOne {
	builder := c.Delete().Where(charm.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharmDeleteOne{builder}
}

// Query returns a query builder for Charm.
func (c *CharmClient) Query() *CharmQuery {
	return &CharmQuery{
		config: c.config,
	}
}

// Get returns a Charm entity by its id.
func (c *CharmClient) Get(ctx context.Context, id types.CharmID) (*Charm, error) {
	return c.Query().Where(charm.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharmClient) GetX(ctx context.Context, id types.CharmID) *Charm {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CharmClient) Hooks() []Hook {
	return c.hooks.Charm
}

// CharmCreatorClient is a client for the CharmCreator schema.
type CharmCreatorClient struct {
	config
}

// NewCharmCreatorClient returns a client for the CharmCreator from the given config.
func NewCharmCreatorClient(c config) *CharmCreatorClient {
	return &CharmCreatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `charmcreator.Hooks(f(g(h())))`.
func (c *CharmCreatorClient) Use(hooks ...Hook) {
	c.hooks.CharmCreator = append(c.hooks.CharmCreator, hooks...)
}

// Create returns a create builder for CharmCreator.
func (c *CharmCreatorClient) Create() *CharmCreatorCreate {
	mutation := newCharmCreatorMutation(c.config, OpCreate)
	return &CharmCreatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CharmCreator entities.
func (c *CharmCreatorClient) CreateBulk(builders ...*CharmCreatorCreate) *CharmCreatorCreateBulk {
	return &CharmCreatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CharmCreator.
func (c *CharmCreatorClient) Update() *CharmCreatorUpdate {
	mutation := newCharmCreatorMutation(c.config, OpUpdate)
	return &CharmCreatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharmCreatorClient) UpdateOne(cc *CharmCreator) *CharmCreatorUpdateOne {
	mutation := newCharmCreatorMutation(c.config, OpUpdateOne, withCharmCreator(cc))
	return &CharmCreatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharmCreatorClient) UpdateOneID(id types.CharmCreatorID) *CharmCreatorUpdateOne {
	mutation := newCharmCreatorMutation(c.config, OpUpdateOne, withCharmCreatorID(id))
	return &CharmCreatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CharmCreator.
func (c *CharmCreatorClient) Delete() *CharmCreatorDelete {
	mutation := newCharmCreatorMutation(c.config, OpDelete)
	return &CharmCreatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CharmCreatorClient) DeleteOne(cc *CharmCreator) *CharmCreatorDeleteOne {
	return c.DeleteOneID(cc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CharmCreatorClient) DeleteOneID(id types.CharmCreatorID) *CharmCreatorDeleteOne {
	builder := c.Delete().Where(charmcreator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharmCreatorDeleteOne{builder}
}

// Query returns a query builder for CharmCreator.
func (c *CharmCreatorClient) Query() *CharmCreatorQuery {
	return &CharmCreatorQuery{
		config: c.config,
	}
}

// Get returns a CharmCreator entity by its id.
func (c *CharmCreatorClient) Get(ctx context.Context, id types.CharmCreatorID) (*CharmCreator, error) {
	return c.Query().Where(charmcreator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharmCreatorClient) GetX(ctx context.Context, id types.CharmCreatorID) *CharmCreator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CharmCreatorClient) Hooks() []Hook {
	return c.hooks.CharmCreator
}

// CharmModelClient is a client for the CharmModel schema.
type CharmModelClient struct {
	config
}

// NewCharmModelClient returns a client for the CharmModel from the given config.
func NewCharmModelClient(c config) *CharmModelClient {
	return &CharmModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `charmmodel.Hooks(f(g(h())))`.
func (c *CharmModelClient) Use(hooks ...Hook) {
	c.hooks.CharmModel = append(c.hooks.CharmModel, hooks...)
}

// Create returns a create builder for CharmModel.
func (c *CharmModelClient) Create() *CharmModelCreate {
	mutation := newCharmModelMutation(c.config, OpCreate)
	return &CharmModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CharmModel entities.
func (c *CharmModelClient) CreateBulk(builders ...*CharmModelCreate) *CharmModelCreateBulk {
	return &CharmModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CharmModel.
func (c *CharmModelClient) Update() *CharmModelUpdate {
	mutation := newCharmModelMutation(c.config, OpUpdate)
	return &CharmModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharmModelClient) UpdateOne(cm *CharmModel) *CharmModelUpdateOne {
	mutation := newCharmModelMutation(c.config, OpUpdateOne, withCharmModel(cm))
	return &CharmModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharmModelClient) UpdateOneID(id types.CharmModelID) *CharmModelUpdateOne {
	mutation := newCharmModelMutation(c.config, OpUpdateOne, withCharmModelID(id))
	return &CharmModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CharmModel.
func (c *CharmModelClient) Delete() *CharmModelDelete {
	mutation := newCharmModelMutation(c.config, OpDelete)
	return &CharmModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CharmModelClient) DeleteOne(cm *CharmModel) *CharmModelDeleteOne {
	return c.DeleteOneID(cm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CharmModelClient) DeleteOneID(id types.CharmModelID) *CharmModelDeleteOne {
	builder := c.Delete().Where(charmmodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharmModelDeleteOne{builder}
}

// Query returns a query builder for CharmModel.
func (c *CharmModelClient) Query() *CharmModelQuery {
	return &CharmModelQuery{
		config: c.config,
	}
}

// Get returns a CharmModel entity by its id.
func (c *CharmModelClient) Get(ctx context.Context, id types.CharmModelID) (*CharmModel, error) {
	return c.Query().Where(charmmodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharmModelClient) GetX(ctx context.Context, id types.CharmModelID) *CharmModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CharmModelClient) Hooks() []Hook {
	return c.hooks.CharmModel
}

// GardenClient is a client for the Garden schema.
type GardenClient struct {
	config
}

// NewGardenClient returns a client for the Garden from the given config.
func NewGardenClient(c config) *GardenClient {
	return &GardenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `garden.Hooks(f(g(h())))`.
func (c *GardenClient) Use(hooks ...Hook) {
	c.hooks.Garden = append(c.hooks.Garden, hooks...)
}

// Create returns a create builder for Garden.
func (c *GardenClient) Create() *GardenCreate {
	mutation := newGardenMutation(c.config, OpCreate)
	return &GardenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Garden entities.
func (c *GardenClient) CreateBulk(builders ...*GardenCreate) *GardenCreateBulk {
	return &GardenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Garden.
func (c *GardenClient) Update() *GardenUpdate {
	mutation := newGardenMutation(c.config, OpUpdate)
	return &GardenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GardenClient) UpdateOne(ga *Garden) *GardenUpdateOne {
	mutation := newGardenMutation(c.config, OpUpdateOne, withGarden(ga))
	return &GardenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GardenClient) UpdateOneID(id types.GardenID) *GardenUpdateOne {
	mutation := newGardenMutation(c.config, OpUpdateOne, withGardenID(id))
	return &GardenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Garden.
func (c *GardenClient) Delete() *GardenDelete {
	mutation := newGardenMutation(c.config, OpDelete)
	return &GardenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GardenClient) DeleteOne(ga *Garden) *GardenDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GardenClient) DeleteOneID(id types.GardenID) *GardenDeleteOne {
	builder := c.Delete().Where(garden.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GardenDeleteOne{builder}
}

// Query returns a query builder for Garden.
func (c *GardenClient) Query() *GardenQuery {
	return &GardenQuery{
		config: c.config,
	}
}

// Get returns a Garden entity by its id.
func (c *GardenClient) Get(ctx context.Context, id types.GardenID) (*Garden, error) {
	return c.Query().Where(garden.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GardenClient) GetX(ctx context.Context, id types.GardenID) *Garden {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GardenClient) Hooks() []Hook {
	return c.hooks.Garden
}

// LilyClient is a client for the Lily schema.
type LilyClient struct {
	config
}

// NewLilyClient returns a client for the Lily from the given config.
func NewLilyClient(c config) *LilyClient {
	return &LilyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lily.Hooks(f(g(h())))`.
func (c *LilyClient) Use(hooks ...Hook) {
	c.hooks.Lily = append(c.hooks.Lily, hooks...)
}

// Create returns a create builder for Lily.
func (c *LilyClient) Create() *LilyCreate {
	mutation := newLilyMutation(c.config, OpCreate)
	return &LilyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Lily entities.
func (c *LilyClient) CreateBulk(builders ...*LilyCreate) *LilyCreateBulk {
	return &LilyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Lily.
func (c *LilyClient) Update() *LilyUpdate {
	mutation := newLilyMutation(c.config, OpUpdate)
	return &LilyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LilyClient) UpdateOne(l *Lily) *LilyUpdateOne {
	mutation := newLilyMutation(c.config, OpUpdateOne, withLily(l))
	return &LilyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LilyClient) UpdateOneID(id types.LilyID) *LilyUpdateOne {
	mutation := newLilyMutation(c.config, OpUpdateOne, withLilyID(id))
	return &LilyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Lily.
func (c *LilyClient) Delete() *LilyDelete {
	mutation := newLilyMutation(c.config, OpDelete)
	return &LilyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LilyClient) DeleteOne(l *Lily) *LilyDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LilyClient) DeleteOneID(id types.LilyID) *LilyDeleteOne {
	builder := c.Delete().Where(lily.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LilyDeleteOne{builder}
}

// Query returns a query builder for Lily.
func (c *LilyClient) Query() *LilyQuery {
	return &LilyQuery{
		config: c.config,
	}
}

// Get returns a Lily entity by its id.
func (c *LilyClient) Get(ctx context.Context, id types.LilyID) (*Lily, error) {
	return c.Query().Where(lily.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LilyClient) GetX(ctx context.Context, id types.LilyID) *Lily {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LilyClient) Hooks() []Hook {
	return c.hooks.Lily
}

// LilySkillClient is a client for the LilySkill schema.
type LilySkillClient struct {
	config
}

// NewLilySkillClient returns a client for the LilySkill from the given config.
func NewLilySkillClient(c config) *LilySkillClient {
	return &LilySkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lilyskill.Hooks(f(g(h())))`.
func (c *LilySkillClient) Use(hooks ...Hook) {
	c.hooks.LilySkill = append(c.hooks.LilySkill, hooks...)
}

// Create returns a create builder for LilySkill.
func (c *LilySkillClient) Create() *LilySkillCreate {
	mutation := newLilySkillMutation(c.config, OpCreate)
	return &LilySkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LilySkill entities.
func (c *LilySkillClient) CreateBulk(builders ...*LilySkillCreate) *LilySkillCreateBulk {
	return &LilySkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LilySkill.
func (c *LilySkillClient) Update() *LilySkillUpdate {
	mutation := newLilySkillMutation(c.config, OpUpdate)
	return &LilySkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LilySkillClient) UpdateOne(ls *LilySkill) *LilySkillUpdateOne {
	mutation := newLilySkillMutation(c.config, OpUpdateOne, withLilySkill(ls))
	return &LilySkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LilySkillClient) UpdateOneID(id int) *LilySkillUpdateOne {
	mutation := newLilySkillMutation(c.config, OpUpdateOne, withLilySkillID(id))
	return &LilySkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LilySkill.
func (c *LilySkillClient) Delete() *LilySkillDelete {
	mutation := newLilySkillMutation(c.config, OpDelete)
	return &LilySkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LilySkillClient) DeleteOne(ls *LilySkill) *LilySkillDeleteOne {
	return c.DeleteOneID(ls.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LilySkillClient) DeleteOneID(id int) *LilySkillDeleteOne {
	builder := c.Delete().Where(lilyskill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LilySkillDeleteOne{builder}
}

// Query returns a query builder for LilySkill.
func (c *LilySkillClient) Query() *LilySkillQuery {
	return &LilySkillQuery{
		config: c.config,
	}
}

// Get returns a LilySkill entity by its id.
func (c *LilySkillClient) Get(ctx context.Context, id int) (*LilySkill, error) {
	return c.Query().Where(lilyskill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LilySkillClient) GetX(ctx context.Context, id int) *LilySkill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LilySkillClient) Hooks() []Hook {
	return c.hooks.LilySkill
}

// MentorshipClient is a client for the Mentorship schema.
type MentorshipClient struct {
	config
}

// NewMentorshipClient returns a client for the Mentorship from the given config.
func NewMentorshipClient(c config) *MentorshipClient {
	return &MentorshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mentorship.Hooks(f(g(h())))`.
func (c *MentorshipClient) Use(hooks ...Hook) {
	c.hooks.Mentorship = append(c.hooks.Mentorship, hooks...)
}

// Create returns a create builder for Mentorship.
func (c *MentorshipClient) Create() *MentorshipCreate {
	mutation := newMentorshipMutation(c.config, OpCreate)
	return &MentorshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Mentorship entities.
func (c *MentorshipClient) CreateBulk(builders ...*MentorshipCreate) *MentorshipCreateBulk {
	return &MentorshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Mentorship.
func (c *MentorshipClient) Update() *MentorshipUpdate {
	mutation := newMentorshipMutation(c.config, OpUpdate)
	return &MentorshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MentorshipClient) UpdateOne(m *Mentorship) *MentorshipUpdateOne {
	mutation := newMentorshipMutation(c.config, OpUpdateOne, withMentorship(m))
	return &MentorshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MentorshipClient) UpdateOneID(id types.MentorshipID) *MentorshipUpdateOne {
	mutation := newMentorshipMutation(c.config, OpUpdateOne, withMentorshipID(id))
	return &MentorshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mentorship.
func (c *MentorshipClient) Delete() *MentorshipDelete {
	mutation := newMentorshipMutation(c.config, OpDelete)
	return &MentorshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MentorshipClient) DeleteOne(m *Mentorship) *MentorshipDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MentorshipClient) DeleteOneID(id types.MentorshipID) *MentorshipDeleteOne {
	builder := c.Delete().Where(mentorship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MentorshipDeleteOne{builder}
}

// Query returns a query builder for Mentorship.
func (c *MentorshipClient) Query() *MentorshipQuery {
	return &MentorshipQuery{
		config: c.config,
	}
}

// Get returns a Mentorship entity by its id.
func (c *MentorshipClient) Get(ctx context.Context, id types.MentorshipID) (*Mentorship, error) {
	return c.Query().Where(mentorship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MentorshipClient) GetX(ctx context.Context, id types.MentorshipID) *Mentorship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MentorshipClient) Hooks() []Hook {
	return c.hooks.Mentorship
}

// SkillClient is a client for the Skill schema.
type SkillClient struct {
	config
}

// NewSkillClient returns a client for the Skill from the given config.
func NewSkillClient(c config) *SkillClient {
	return &SkillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `skill.Hooks(f(g(h())))`.
func (c *SkillClient) Use(hooks ...Hook) {
	c.hooks.Skill = append(c.hooks.Skill, hooks...)
}

// Create returns a create builder for Skill.
func (c *SkillClient) Create() *SkillCreate {
	mutation := newSkillMutation(c.config, OpCreate)
	return &SkillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Skill entities.
func (c *SkillClient) CreateBulk(builders ...*SkillCreate) *SkillCreateBulk {
	return &SkillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Skill.
func (c *SkillClient) Update() *SkillUpdate {
	mutation := newSkillMutation(c.config, OpUpdate)
	return &SkillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SkillClient) UpdateOne(s *Skill) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkill(s))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SkillClient) UpdateOneID(id types.SkillID) *SkillUpdateOne {
	mutation := newSkillMutation(c.config, OpUpdateOne, withSkillID(id))
	return &SkillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Skill.
func (c *SkillClient) Delete() *SkillDelete {
	mutation := newSkillMutation(c.config, OpDelete)
	return &SkillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SkillClient) DeleteOne(s *Skill) *SkillDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SkillClient) DeleteOneID(id types.SkillID) *SkillDeleteOne {
	builder := c.Delete().Where(skill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SkillDeleteOne{builder}
}

// Query returns a query builder for Skill.
func (c *SkillClient) Query() *SkillQuery {
	return &SkillQuery{
		config: c.config,
	}
}

// Get returns a Skill entity by its id.
func (c *SkillClient) Get(ctx context.Context, id types.SkillID) (*Skill, error) {
	return c.Query().Where(skill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SkillClient) GetX(ctx context.Context, id types.SkillID) *Skill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SkillClient) Hooks() []Hook {
	return c.hooks.Skill
}
