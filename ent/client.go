// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"study-event-go/ent/migrate"
	"study-event-go/types"

	"study-event-go/ent/garden"
	"study-event-go/ent/mentorship"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Garden is the client for interacting with the Garden builders.
	Garden *GardenClient
	// Mentorship is the client for interacting with the Mentorship builders.
	Mentorship *MentorshipClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Garden = NewGardenClient(c.config)
	c.Mentorship = NewMentorshipClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Garden:     NewGardenClient(cfg),
		Mentorship: NewMentorshipClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:     cfg,
		Garden:     NewGardenClient(cfg),
		Mentorship: NewMentorshipClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Garden.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Garden.Use(hooks...)
	c.Mentorship.Use(hooks...)
}

// GardenClient is a client for the Garden schema.
type GardenClient struct {
	config
}

// NewGardenClient returns a client for the Garden from the given config.
func NewGardenClient(c config) *GardenClient {
	return &GardenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `garden.Hooks(f(g(h())))`.
func (c *GardenClient) Use(hooks ...Hook) {
	c.hooks.Garden = append(c.hooks.Garden, hooks...)
}

// Create returns a create builder for Garden.
func (c *GardenClient) Create() *GardenCreate {
	mutation := newGardenMutation(c.config, OpCreate)
	return &GardenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Garden entities.
func (c *GardenClient) CreateBulk(builders ...*GardenCreate) *GardenCreateBulk {
	return &GardenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Garden.
func (c *GardenClient) Update() *GardenUpdate {
	mutation := newGardenMutation(c.config, OpUpdate)
	return &GardenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GardenClient) UpdateOne(ga *Garden) *GardenUpdateOne {
	mutation := newGardenMutation(c.config, OpUpdateOne, withGarden(ga))
	return &GardenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GardenClient) UpdateOneID(id types.GardenID) *GardenUpdateOne {
	mutation := newGardenMutation(c.config, OpUpdateOne, withGardenID(id))
	return &GardenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Garden.
func (c *GardenClient) Delete() *GardenDelete {
	mutation := newGardenMutation(c.config, OpDelete)
	return &GardenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GardenClient) DeleteOne(ga *Garden) *GardenDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GardenClient) DeleteOneID(id types.GardenID) *GardenDeleteOne {
	builder := c.Delete().Where(garden.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GardenDeleteOne{builder}
}

// Query returns a query builder for Garden.
func (c *GardenClient) Query() *GardenQuery {
	return &GardenQuery{
		config: c.config,
	}
}

// Get returns a Garden entity by its id.
func (c *GardenClient) Get(ctx context.Context, id types.GardenID) (*Garden, error) {
	return c.Query().Where(garden.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GardenClient) GetX(ctx context.Context, id types.GardenID) *Garden {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMentorship queries the mentorship edge of a Garden.
func (c *GardenClient) QueryMentorship(ga *Garden) *MentorshipQuery {
	query := &MentorshipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(garden.Table, garden.FieldID, id),
			sqlgraph.To(mentorship.Table, mentorship.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, garden.MentorshipTable, garden.MentorshipColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GardenClient) Hooks() []Hook {
	return c.hooks.Garden
}

// MentorshipClient is a client for the Mentorship schema.
type MentorshipClient struct {
	config
}

// NewMentorshipClient returns a client for the Mentorship from the given config.
func NewMentorshipClient(c config) *MentorshipClient {
	return &MentorshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mentorship.Hooks(f(g(h())))`.
func (c *MentorshipClient) Use(hooks ...Hook) {
	c.hooks.Mentorship = append(c.hooks.Mentorship, hooks...)
}

// Create returns a create builder for Mentorship.
func (c *MentorshipClient) Create() *MentorshipCreate {
	mutation := newMentorshipMutation(c.config, OpCreate)
	return &MentorshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Mentorship entities.
func (c *MentorshipClient) CreateBulk(builders ...*MentorshipCreate) *MentorshipCreateBulk {
	return &MentorshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Mentorship.
func (c *MentorshipClient) Update() *MentorshipUpdate {
	mutation := newMentorshipMutation(c.config, OpUpdate)
	return &MentorshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MentorshipClient) UpdateOne(m *Mentorship) *MentorshipUpdateOne {
	mutation := newMentorshipMutation(c.config, OpUpdateOne, withMentorship(m))
	return &MentorshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MentorshipClient) UpdateOneID(id types.MentorshipID) *MentorshipUpdateOne {
	mutation := newMentorshipMutation(c.config, OpUpdateOne, withMentorshipID(id))
	return &MentorshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mentorship.
func (c *MentorshipClient) Delete() *MentorshipDelete {
	mutation := newMentorshipMutation(c.config, OpDelete)
	return &MentorshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MentorshipClient) DeleteOne(m *Mentorship) *MentorshipDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MentorshipClient) DeleteOneID(id types.MentorshipID) *MentorshipDeleteOne {
	builder := c.Delete().Where(mentorship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MentorshipDeleteOne{builder}
}

// Query returns a query builder for Mentorship.
func (c *MentorshipClient) Query() *MentorshipQuery {
	return &MentorshipQuery{
		config: c.config,
	}
}

// Get returns a Mentorship entity by its id.
func (c *MentorshipClient) Get(ctx context.Context, id types.MentorshipID) (*Mentorship, error) {
	return c.Query().Where(mentorship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MentorshipClient) GetX(ctx context.Context, id types.MentorshipID) *Mentorship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MentorshipClient) Hooks() []Hook {
	return c.hooks.Mentorship
}
