// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-event-go/ent/lily"
	"study-event-go/types"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Lily is the model entity for the Lily schema.
type Lily struct {
	config `json:"-"`
	// ID of the ent.
	ID types.LilyID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CauseOfDeletion holds the value of the "cause_of_deletion" field.
	CauseOfDeletion types.CauseOfDeletion `json:"cause_of_deletion,omitempty"`
	// Birth holds the value of the "birth" field.
	Birth *time.Time `json:"birth,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// MiddleName holds the value of the "middle_name" field.
	MiddleName string `json:"middle_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank uint32 `json:"rank,omitempty"`
	// GardenID holds the value of the "garden_id" field.
	GardenID types.GardenID `json:"garden_id,omitempty"`
	// LegionID holds the value of the "legion_id" field.
	LegionID types.LegionID `json:"legion_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Lily) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lily.FieldID, lily.FieldCauseOfDeletion, lily.FieldRank, lily.FieldGardenID, lily.FieldLegionID:
			values[i] = new(sql.NullInt64)
		case lily.FieldFirstName, lily.FieldMiddleName, lily.FieldLastName:
			values[i] = new(sql.NullString)
		case lily.FieldCreatedAt, lily.FieldUpdatedAt, lily.FieldDeletedAt, lily.FieldBirth:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Lily", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Lily fields.
func (l *Lily) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lily.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = types.LilyID(value.Int64)
		case lily.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				l.CreatedAt = value.Time
			}
		case lily.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				l.UpdatedAt = value.Time
			}
		case lily.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				l.DeletedAt = new(time.Time)
				*l.DeletedAt = value.Time
			}
		case lily.FieldCauseOfDeletion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cause_of_deletion", values[i])
			} else if value.Valid {
				l.CauseOfDeletion = types.CauseOfDeletion(value.Int64)
			}
		case lily.FieldBirth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth", values[i])
			} else if value.Valid {
				l.Birth = new(time.Time)
				*l.Birth = value.Time
			}
		case lily.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				l.FirstName = value.String
			}
		case lily.FieldMiddleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field middle_name", values[i])
			} else if value.Valid {
				l.MiddleName = value.String
			}
		case lily.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				l.LastName = value.String
			}
		case lily.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				l.Rank = uint32(value.Int64)
			}
		case lily.FieldGardenID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field garden_id", values[i])
			} else if value.Valid {
				l.GardenID = types.GardenID(value.Int64)
			}
		case lily.FieldLegionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field legion_id", values[i])
			} else if value.Valid {
				l.LegionID = types.LegionID(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Lily.
// Note that you need to call Lily.Unwrap() before calling this method if this Lily
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Lily) Update() *LilyUpdateOne {
	return (&LilyClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Lily entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Lily) Unwrap() *Lily {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Lily is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Lily) String() string {
	var builder strings.Builder
	builder.WriteString("Lily(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(l.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(l.UpdatedAt.Format(time.ANSIC))
	if v := l.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", cause_of_deletion=")
	builder.WriteString(fmt.Sprintf("%v", l.CauseOfDeletion))
	if v := l.Birth; v != nil {
		builder.WriteString(", birth=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", first_name=")
	builder.WriteString(l.FirstName)
	builder.WriteString(", middle_name=")
	builder.WriteString(l.MiddleName)
	builder.WriteString(", last_name=")
	builder.WriteString(l.LastName)
	builder.WriteString(", rank=")
	builder.WriteString(fmt.Sprintf("%v", l.Rank))
	builder.WriteString(", garden_id=")
	builder.WriteString(fmt.Sprintf("%v", l.GardenID))
	builder.WriteString(", legion_id=")
	builder.WriteString(fmt.Sprintf("%v", l.LegionID))
	builder.WriteByte(')')
	return builder.String()
}

// Lilies is a parsable slice of Lily.
type Lilies []*Lily

func (l Lilies) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
