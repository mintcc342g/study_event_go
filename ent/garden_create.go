// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study_event_go/ent/garden"
	"study_event_go/ent/mentorshipsystem"
	"study_event_go/types"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GardenCreate is the builder for creating a Garden entity.
type GardenCreate struct {
	config
	mutation *GardenMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (gc *GardenCreate) SetName(s string) *GardenCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetLocation sets the "location" field.
func (gc *GardenCreate) SetLocation(s string) *GardenCreate {
	gc.mutation.SetLocation(s)
	return gc
}

// SetMentorshipSystemID sets the "mentorship_system_id" field.
func (gc *GardenCreate) SetMentorshipSystemID(tsi types.MentorshipSystemID) *GardenCreate {
	gc.mutation.SetMentorshipSystemID(tsi)
	return gc
}

// SetNillableMentorshipSystemID sets the "mentorship_system_id" field if the given value is not nil.
func (gc *GardenCreate) SetNillableMentorshipSystemID(tsi *types.MentorshipSystemID) *GardenCreate {
	if tsi != nil {
		gc.SetMentorshipSystemID(*tsi)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GardenCreate) SetID(ti types.GardenID) *GardenCreate {
	gc.mutation.SetID(ti)
	return gc
}

// SetMentorshipSystem sets the "mentorship_system" edge to the MentorshipSystem entity.
func (gc *GardenCreate) SetMentorshipSystem(m *MentorshipSystem) *GardenCreate {
	return gc.SetMentorshipSystemID(m.ID)
}

// Mutation returns the GardenMutation object of the builder.
func (gc *GardenCreate) Mutation() *GardenMutation {
	return gc.mutation
}

// Save creates the Garden in the database.
func (gc *GardenCreate) Save(ctx context.Context) (*Garden, error) {
	var (
		err  error
		node *Garden
	)
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GardenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GardenCreate) SaveX(ctx context.Context) *Garden {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GardenCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GardenCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GardenCreate) check() error {
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := gc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "location"`)}
	}
	return nil
}

func (gc *GardenCreate) sqlSave(ctx context.Context) (*Garden, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = types.GardenID(id)
	}
	return _node, nil
}

func (gc *GardenCreate) createSpec() (*Garden, *sqlgraph.CreateSpec) {
	var (
		_node = &Garden{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: garden.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: garden.FieldID,
			},
		}
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: garden.FieldName,
		})
		_node.Name = value
	}
	if value, ok := gc.mutation.Location(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: garden.FieldLocation,
		})
		_node.Location = value
	}
	if nodes := gc.mutation.MentorshipSystemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   garden.MentorshipSystemTable,
			Columns: []string{garden.MentorshipSystemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: mentorshipsystem.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MentorshipSystemID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GardenCreateBulk is the builder for creating many Garden entities in bulk.
type GardenCreateBulk struct {
	config
	builders []*GardenCreate
}

// Save creates the Garden entities in the database.
func (gcb *GardenCreateBulk) Save(ctx context.Context) ([]*Garden, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Garden, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GardenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = types.GardenID(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GardenCreateBulk) SaveX(ctx context.Context) []*Garden {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GardenCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GardenCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
