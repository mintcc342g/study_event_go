// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"study_event_go/ent/mentorshipsystem"
	"study_event_go/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MentorshipSystemUpdate is the builder for updating MentorshipSystem entities.
type MentorshipSystemUpdate struct {
	config
	hooks    []Hook
	mutation *MentorshipSystemMutation
}

// Where appends a list predicates to the MentorshipSystemUpdate builder.
func (msu *MentorshipSystemUpdate) Where(ps ...predicate.MentorshipSystem) *MentorshipSystemUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetName sets the "name" field.
func (msu *MentorshipSystemUpdate) SetName(s string) *MentorshipSystemUpdate {
	msu.mutation.SetName(s)
	return msu
}

// Mutation returns the MentorshipSystemMutation object of the builder.
func (msu *MentorshipSystemUpdate) Mutation() *MentorshipSystemMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MentorshipSystemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(msu.hooks) == 0 {
		affected, err = msu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MentorshipSystemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msu.mutation = mutation
			affected, err = msu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(msu.hooks) - 1; i >= 0; i-- {
			if msu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MentorshipSystemUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MentorshipSystemUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MentorshipSystemUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msu *MentorshipSystemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mentorshipsystem.Table,
			Columns: mentorshipsystem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: mentorshipsystem.FieldID,
			},
		},
	}
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mentorshipsystem.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mentorshipsystem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MentorshipSystemUpdateOne is the builder for updating a single MentorshipSystem entity.
type MentorshipSystemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MentorshipSystemMutation
}

// SetName sets the "name" field.
func (msuo *MentorshipSystemUpdateOne) SetName(s string) *MentorshipSystemUpdateOne {
	msuo.mutation.SetName(s)
	return msuo
}

// Mutation returns the MentorshipSystemMutation object of the builder.
func (msuo *MentorshipSystemUpdateOne) Mutation() *MentorshipSystemMutation {
	return msuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MentorshipSystemUpdateOne) Select(field string, fields ...string) *MentorshipSystemUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MentorshipSystem entity.
func (msuo *MentorshipSystemUpdateOne) Save(ctx context.Context) (*MentorshipSystem, error) {
	var (
		err  error
		node *MentorshipSystem
	)
	if len(msuo.hooks) == 0 {
		node, err = msuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MentorshipSystemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msuo.mutation = mutation
			node, err = msuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(msuo.hooks) - 1; i >= 0; i-- {
			if msuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MentorshipSystemUpdateOne) SaveX(ctx context.Context) *MentorshipSystem {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MentorshipSystemUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MentorshipSystemUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msuo *MentorshipSystemUpdateOne) sqlSave(ctx context.Context) (_node *MentorshipSystem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mentorshipsystem.Table,
			Columns: mentorshipsystem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: mentorshipsystem.FieldID,
			},
		},
	}
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MentorshipSystem.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mentorshipsystem.FieldID)
		for _, f := range fields {
			if !mentorshipsystem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mentorshipsystem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mentorshipsystem.FieldName,
		})
	}
	_node = &MentorshipSystem{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mentorshipsystem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
