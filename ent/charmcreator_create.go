// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-event-go/ent/charmcreator"
	"study-event-go/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CharmCreatorCreate is the builder for creating a CharmCreator entity.
type CharmCreatorCreate struct {
	config
	mutation *CharmCreatorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ccc *CharmCreatorCreate) SetCreatedAt(t time.Time) *CharmCreatorCreate {
	ccc.mutation.SetCreatedAt(t)
	return ccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccc *CharmCreatorCreate) SetNillableCreatedAt(t *time.Time) *CharmCreatorCreate {
	if t != nil {
		ccc.SetCreatedAt(*t)
	}
	return ccc
}

// SetUpdatedAt sets the "updated_at" field.
func (ccc *CharmCreatorCreate) SetUpdatedAt(t time.Time) *CharmCreatorCreate {
	ccc.mutation.SetUpdatedAt(t)
	return ccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccc *CharmCreatorCreate) SetNillableUpdatedAt(t *time.Time) *CharmCreatorCreate {
	if t != nil {
		ccc.SetUpdatedAt(*t)
	}
	return ccc
}

// SetDeletedAt sets the "deleted_at" field.
func (ccc *CharmCreatorCreate) SetDeletedAt(t time.Time) *CharmCreatorCreate {
	ccc.mutation.SetDeletedAt(t)
	return ccc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ccc *CharmCreatorCreate) SetNillableDeletedAt(t *time.Time) *CharmCreatorCreate {
	if t != nil {
		ccc.SetDeletedAt(*t)
	}
	return ccc
}

// SetName sets the "name" field.
func (ccc *CharmCreatorCreate) SetName(s string) *CharmCreatorCreate {
	ccc.mutation.SetName(s)
	return ccc
}

// SetType sets the "type" field.
func (ccc *CharmCreatorCreate) SetType(tt types.ArsenalType) *CharmCreatorCreate {
	ccc.mutation.SetType(tt)
	return ccc
}

// SetID sets the "id" field.
func (ccc *CharmCreatorCreate) SetID(tci types.CharmCreatorID) *CharmCreatorCreate {
	ccc.mutation.SetID(tci)
	return ccc
}

// Mutation returns the CharmCreatorMutation object of the builder.
func (ccc *CharmCreatorCreate) Mutation() *CharmCreatorMutation {
	return ccc.mutation
}

// Save creates the CharmCreator in the database.
func (ccc *CharmCreatorCreate) Save(ctx context.Context) (*CharmCreator, error) {
	var (
		err  error
		node *CharmCreator
	)
	ccc.defaults()
	if len(ccc.hooks) == 0 {
		if err = ccc.check(); err != nil {
			return nil, err
		}
		node, err = ccc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharmCreatorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ccc.check(); err != nil {
				return nil, err
			}
			ccc.mutation = mutation
			if node, err = ccc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ccc.hooks) - 1; i >= 0; i-- {
			if ccc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ccc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ccc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CharmCreatorCreate) SaveX(ctx context.Context) *CharmCreator {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CharmCreatorCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CharmCreatorCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ccc *CharmCreatorCreate) defaults() {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		v := charmcreator.DefaultCreatedAt()
		ccc.mutation.SetCreatedAt(v)
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		v := charmcreator.DefaultUpdatedAt()
		ccc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CharmCreatorCreate) check() error {
	if _, ok := ccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ccc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := ccc.mutation.Name(); ok {
		if err := charmcreator.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := ccc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	return nil
}

func (ccc *CharmCreatorCreate) sqlSave(ctx context.Context) (*CharmCreator, error) {
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = types.CharmCreatorID(id)
	}
	return _node, nil
}

func (ccc *CharmCreatorCreate) createSpec() (*CharmCreator, *sqlgraph.CreateSpec) {
	var (
		_node = &CharmCreator{config: ccc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: charmcreator.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: charmcreator.FieldID,
			},
		}
	)
	_spec.OnConflict = ccc.conflict
	if id, ok := ccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ccc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmcreator.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ccc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmcreator.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ccc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmcreator.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ccc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: charmcreator.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ccc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmcreator.FieldType,
		})
		_node.Type = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CharmCreator.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CharmCreatorUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ccc *CharmCreatorCreate) OnConflict(opts ...sql.ConflictOption) *CharmCreatorUpsertOne {
	ccc.conflict = opts
	return &CharmCreatorUpsertOne{
		create: ccc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CharmCreator.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ccc *CharmCreatorCreate) OnConflictColumns(columns ...string) *CharmCreatorUpsertOne {
	ccc.conflict = append(ccc.conflict, sql.ConflictColumns(columns...))
	return &CharmCreatorUpsertOne{
		create: ccc,
	}
}

type (
	// CharmCreatorUpsertOne is the builder for "upsert"-ing
	//  one CharmCreator node.
	CharmCreatorUpsertOne struct {
		create *CharmCreatorCreate
	}

	// CharmCreatorUpsert is the "OnConflict" setter.
	CharmCreatorUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CharmCreatorUpsert) SetCreatedAt(v time.Time) *CharmCreatorUpsert {
	u.Set(charmcreator.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CharmCreatorUpsert) UpdateCreatedAt() *CharmCreatorUpsert {
	u.SetExcluded(charmcreator.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CharmCreatorUpsert) SetUpdatedAt(v time.Time) *CharmCreatorUpsert {
	u.Set(charmcreator.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CharmCreatorUpsert) UpdateUpdatedAt() *CharmCreatorUpsert {
	u.SetExcluded(charmcreator.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CharmCreatorUpsert) SetDeletedAt(v time.Time) *CharmCreatorUpsert {
	u.Set(charmcreator.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CharmCreatorUpsert) UpdateDeletedAt() *CharmCreatorUpsert {
	u.SetExcluded(charmcreator.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CharmCreatorUpsert) ClearDeletedAt() *CharmCreatorUpsert {
	u.SetNull(charmcreator.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *CharmCreatorUpsert) SetName(v string) *CharmCreatorUpsert {
	u.Set(charmcreator.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CharmCreatorUpsert) UpdateName() *CharmCreatorUpsert {
	u.SetExcluded(charmcreator.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *CharmCreatorUpsert) SetType(v types.ArsenalType) *CharmCreatorUpsert {
	u.Set(charmcreator.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CharmCreatorUpsert) UpdateType() *CharmCreatorUpsert {
	u.SetExcluded(charmcreator.FieldType)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CharmCreator.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(charmcreator.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CharmCreatorUpsertOne) UpdateNewValues() *CharmCreatorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(charmcreator.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CharmCreator.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CharmCreatorUpsertOne) Ignore() *CharmCreatorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CharmCreatorUpsertOne) DoNothing() *CharmCreatorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CharmCreatorCreate.OnConflict
// documentation for more info.
func (u *CharmCreatorUpsertOne) Update(set func(*CharmCreatorUpsert)) *CharmCreatorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CharmCreatorUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CharmCreatorUpsertOne) SetCreatedAt(v time.Time) *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CharmCreatorUpsertOne) UpdateCreatedAt() *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CharmCreatorUpsertOne) SetUpdatedAt(v time.Time) *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CharmCreatorUpsertOne) UpdateUpdatedAt() *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CharmCreatorUpsertOne) SetDeletedAt(v time.Time) *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CharmCreatorUpsertOne) UpdateDeletedAt() *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CharmCreatorUpsertOne) ClearDeletedAt() *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *CharmCreatorUpsertOne) SetName(v string) *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CharmCreatorUpsertOne) UpdateName() *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *CharmCreatorUpsertOne) SetType(v types.ArsenalType) *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CharmCreatorUpsertOne) UpdateType() *CharmCreatorUpsertOne {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *CharmCreatorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CharmCreatorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CharmCreatorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CharmCreatorUpsertOne) ID(ctx context.Context) (id types.CharmCreatorID, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CharmCreatorUpsertOne) IDX(ctx context.Context) types.CharmCreatorID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CharmCreatorCreateBulk is the builder for creating many CharmCreator entities in bulk.
type CharmCreatorCreateBulk struct {
	config
	builders []*CharmCreatorCreate
	conflict []sql.ConflictOption
}

// Save creates the CharmCreator entities in the database.
func (cccb *CharmCreatorCreateBulk) Save(ctx context.Context) ([]*CharmCreator, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CharmCreator, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CharmCreatorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = types.CharmCreatorID(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CharmCreatorCreateBulk) SaveX(ctx context.Context) []*CharmCreator {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CharmCreatorCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CharmCreatorCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CharmCreator.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CharmCreatorUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cccb *CharmCreatorCreateBulk) OnConflict(opts ...sql.ConflictOption) *CharmCreatorUpsertBulk {
	cccb.conflict = opts
	return &CharmCreatorUpsertBulk{
		create: cccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CharmCreator.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cccb *CharmCreatorCreateBulk) OnConflictColumns(columns ...string) *CharmCreatorUpsertBulk {
	cccb.conflict = append(cccb.conflict, sql.ConflictColumns(columns...))
	return &CharmCreatorUpsertBulk{
		create: cccb,
	}
}

// CharmCreatorUpsertBulk is the builder for "upsert"-ing
// a bulk of CharmCreator nodes.
type CharmCreatorUpsertBulk struct {
	create *CharmCreatorCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CharmCreator.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(charmcreator.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CharmCreatorUpsertBulk) UpdateNewValues() *CharmCreatorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(charmcreator.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CharmCreator.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CharmCreatorUpsertBulk) Ignore() *CharmCreatorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CharmCreatorUpsertBulk) DoNothing() *CharmCreatorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CharmCreatorCreateBulk.OnConflict
// documentation for more info.
func (u *CharmCreatorUpsertBulk) Update(set func(*CharmCreatorUpsert)) *CharmCreatorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CharmCreatorUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CharmCreatorUpsertBulk) SetCreatedAt(v time.Time) *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CharmCreatorUpsertBulk) UpdateCreatedAt() *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CharmCreatorUpsertBulk) SetUpdatedAt(v time.Time) *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CharmCreatorUpsertBulk) UpdateUpdatedAt() *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CharmCreatorUpsertBulk) SetDeletedAt(v time.Time) *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CharmCreatorUpsertBulk) UpdateDeletedAt() *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CharmCreatorUpsertBulk) ClearDeletedAt() *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *CharmCreatorUpsertBulk) SetName(v string) *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CharmCreatorUpsertBulk) UpdateName() *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *CharmCreatorUpsertBulk) SetType(v types.ArsenalType) *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *CharmCreatorUpsertBulk) UpdateType() *CharmCreatorUpsertBulk {
	return u.Update(func(s *CharmCreatorUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *CharmCreatorUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CharmCreatorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CharmCreatorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CharmCreatorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
