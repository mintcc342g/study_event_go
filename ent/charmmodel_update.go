// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"study-event-go/ent/charmmodel"
	"study-event-go/ent/predicate"
	"study-event-go/types"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CharmModelUpdate is the builder for updating CharmModel entities.
type CharmModelUpdate struct {
	config
	hooks    []Hook
	mutation *CharmModelMutation
}

// Where appends a list predicates to the CharmModelUpdate builder.
func (cmu *CharmModelUpdate) Where(ps ...predicate.CharmModel) *CharmModelUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetCreatedAt sets the "created_at" field.
func (cmu *CharmModelUpdate) SetCreatedAt(t time.Time) *CharmModelUpdate {
	cmu.mutation.SetCreatedAt(t)
	return cmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmu *CharmModelUpdate) SetNillableCreatedAt(t *time.Time) *CharmModelUpdate {
	if t != nil {
		cmu.SetCreatedAt(*t)
	}
	return cmu
}

// SetUpdatedAt sets the "updated_at" field.
func (cmu *CharmModelUpdate) SetUpdatedAt(t time.Time) *CharmModelUpdate {
	cmu.mutation.SetUpdatedAt(t)
	return cmu
}

// SetDeletedAt sets the "deleted_at" field.
func (cmu *CharmModelUpdate) SetDeletedAt(t time.Time) *CharmModelUpdate {
	cmu.mutation.SetDeletedAt(t)
	return cmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cmu *CharmModelUpdate) SetNillableDeletedAt(t *time.Time) *CharmModelUpdate {
	if t != nil {
		cmu.SetDeletedAt(*t)
	}
	return cmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cmu *CharmModelUpdate) ClearDeletedAt() *CharmModelUpdate {
	cmu.mutation.ClearDeletedAt()
	return cmu
}

// SetCreatorID sets the "creator_id" field.
func (cmu *CharmModelUpdate) SetCreatorID(tci types.CharmCreatorID) *CharmModelUpdate {
	cmu.mutation.ResetCreatorID()
	cmu.mutation.SetCreatorID(tci)
	return cmu
}

// AddCreatorID adds tci to the "creator_id" field.
func (cmu *CharmModelUpdate) AddCreatorID(tci types.CharmCreatorID) *CharmModelUpdate {
	cmu.mutation.AddCreatorID(tci)
	return cmu
}

// SetName sets the "name" field.
func (cmu *CharmModelUpdate) SetName(s string) *CharmModelUpdate {
	cmu.mutation.SetName(s)
	return cmu
}

// SetType sets the "type" field.
func (cmu *CharmModelUpdate) SetType(tmt types.CharmModelType) *CharmModelUpdate {
	cmu.mutation.ResetType()
	cmu.mutation.SetType(tmt)
	return cmu
}

// AddType adds tmt to the "type" field.
func (cmu *CharmModelUpdate) AddType(tmt types.CharmModelType) *CharmModelUpdate {
	cmu.mutation.AddType(tmt)
	return cmu
}

// SetGeneration sets the "generation" field.
func (cmu *CharmModelUpdate) SetGeneration(tmg types.CharmModelGeneration) *CharmModelUpdate {
	cmu.mutation.ResetGeneration()
	cmu.mutation.SetGeneration(tmg)
	return cmu
}

// AddGeneration adds tmg to the "generation" field.
func (cmu *CharmModelUpdate) AddGeneration(tmg types.CharmModelGeneration) *CharmModelUpdate {
	cmu.mutation.AddGeneration(tmg)
	return cmu
}

// Mutation returns the CharmModelMutation object of the builder.
func (cmu *CharmModelUpdate) Mutation() *CharmModelMutation {
	return cmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *CharmModelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cmu.defaults()
	if len(cmu.hooks) == 0 {
		if err = cmu.check(); err != nil {
			return 0, err
		}
		affected, err = cmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharmModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmu.check(); err != nil {
				return 0, err
			}
			cmu.mutation = mutation
			affected, err = cmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cmu.hooks) - 1; i >= 0; i-- {
			if cmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *CharmModelUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *CharmModelUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *CharmModelUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmu *CharmModelUpdate) defaults() {
	if _, ok := cmu.mutation.UpdatedAt(); !ok {
		v := charmmodel.UpdateDefaultUpdatedAt()
		cmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmu *CharmModelUpdate) check() error {
	if v, ok := cmu.mutation.Name(); ok {
		if err := charmmodel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cmu *CharmModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   charmmodel.Table,
			Columns: charmmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: charmmodel.FieldID,
			},
		},
	}
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmmodel.FieldCreatedAt,
		})
	}
	if value, ok := cmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmmodel.FieldUpdatedAt,
		})
	}
	if value, ok := cmu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmmodel.FieldDeletedAt,
		})
	}
	if cmu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: charmmodel.FieldDeletedAt,
		})
	}
	if value, ok := cmu.mutation.CreatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: charmmodel.FieldCreatorID,
		})
	}
	if value, ok := cmu.mutation.AddedCreatorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: charmmodel.FieldCreatorID,
		})
	}
	if value, ok := cmu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: charmmodel.FieldName,
		})
	}
	if value, ok := cmu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmmodel.FieldType,
		})
	}
	if value, ok := cmu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmmodel.FieldType,
		})
	}
	if value, ok := cmu.mutation.Generation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmmodel.FieldGeneration,
		})
	}
	if value, ok := cmu.mutation.AddedGeneration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmmodel.FieldGeneration,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{charmmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CharmModelUpdateOne is the builder for updating a single CharmModel entity.
type CharmModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharmModelMutation
}

// SetCreatedAt sets the "created_at" field.
func (cmuo *CharmModelUpdateOne) SetCreatedAt(t time.Time) *CharmModelUpdateOne {
	cmuo.mutation.SetCreatedAt(t)
	return cmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmuo *CharmModelUpdateOne) SetNillableCreatedAt(t *time.Time) *CharmModelUpdateOne {
	if t != nil {
		cmuo.SetCreatedAt(*t)
	}
	return cmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cmuo *CharmModelUpdateOne) SetUpdatedAt(t time.Time) *CharmModelUpdateOne {
	cmuo.mutation.SetUpdatedAt(t)
	return cmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cmuo *CharmModelUpdateOne) SetDeletedAt(t time.Time) *CharmModelUpdateOne {
	cmuo.mutation.SetDeletedAt(t)
	return cmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cmuo *CharmModelUpdateOne) SetNillableDeletedAt(t *time.Time) *CharmModelUpdateOne {
	if t != nil {
		cmuo.SetDeletedAt(*t)
	}
	return cmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cmuo *CharmModelUpdateOne) ClearDeletedAt() *CharmModelUpdateOne {
	cmuo.mutation.ClearDeletedAt()
	return cmuo
}

// SetCreatorID sets the "creator_id" field.
func (cmuo *CharmModelUpdateOne) SetCreatorID(tci types.CharmCreatorID) *CharmModelUpdateOne {
	cmuo.mutation.ResetCreatorID()
	cmuo.mutation.SetCreatorID(tci)
	return cmuo
}

// AddCreatorID adds tci to the "creator_id" field.
func (cmuo *CharmModelUpdateOne) AddCreatorID(tci types.CharmCreatorID) *CharmModelUpdateOne {
	cmuo.mutation.AddCreatorID(tci)
	return cmuo
}

// SetName sets the "name" field.
func (cmuo *CharmModelUpdateOne) SetName(s string) *CharmModelUpdateOne {
	cmuo.mutation.SetName(s)
	return cmuo
}

// SetType sets the "type" field.
func (cmuo *CharmModelUpdateOne) SetType(tmt types.CharmModelType) *CharmModelUpdateOne {
	cmuo.mutation.ResetType()
	cmuo.mutation.SetType(tmt)
	return cmuo
}

// AddType adds tmt to the "type" field.
func (cmuo *CharmModelUpdateOne) AddType(tmt types.CharmModelType) *CharmModelUpdateOne {
	cmuo.mutation.AddType(tmt)
	return cmuo
}

// SetGeneration sets the "generation" field.
func (cmuo *CharmModelUpdateOne) SetGeneration(tmg types.CharmModelGeneration) *CharmModelUpdateOne {
	cmuo.mutation.ResetGeneration()
	cmuo.mutation.SetGeneration(tmg)
	return cmuo
}

// AddGeneration adds tmg to the "generation" field.
func (cmuo *CharmModelUpdateOne) AddGeneration(tmg types.CharmModelGeneration) *CharmModelUpdateOne {
	cmuo.mutation.AddGeneration(tmg)
	return cmuo
}

// Mutation returns the CharmModelMutation object of the builder.
func (cmuo *CharmModelUpdateOne) Mutation() *CharmModelMutation {
	return cmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *CharmModelUpdateOne) Select(field string, fields ...string) *CharmModelUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated CharmModel entity.
func (cmuo *CharmModelUpdateOne) Save(ctx context.Context) (*CharmModel, error) {
	var (
		err  error
		node *CharmModel
	)
	cmuo.defaults()
	if len(cmuo.hooks) == 0 {
		if err = cmuo.check(); err != nil {
			return nil, err
		}
		node, err = cmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharmModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cmuo.check(); err != nil {
				return nil, err
			}
			cmuo.mutation = mutation
			node, err = cmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cmuo.hooks) - 1; i >= 0; i-- {
			if cmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *CharmModelUpdateOne) SaveX(ctx context.Context) *CharmModel {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *CharmModelUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *CharmModelUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmuo *CharmModelUpdateOne) defaults() {
	if _, ok := cmuo.mutation.UpdatedAt(); !ok {
		v := charmmodel.UpdateDefaultUpdatedAt()
		cmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmuo *CharmModelUpdateOne) check() error {
	if v, ok := cmuo.mutation.Name(); ok {
		if err := charmmodel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (cmuo *CharmModelUpdateOne) sqlSave(ctx context.Context) (_node *CharmModel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   charmmodel.Table,
			Columns: charmmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: charmmodel.FieldID,
			},
		},
	}
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CharmModel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, charmmodel.FieldID)
		for _, f := range fields {
			if !charmmodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != charmmodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmmodel.FieldCreatedAt,
		})
	}
	if value, ok := cmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmmodel.FieldUpdatedAt,
		})
	}
	if value, ok := cmuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: charmmodel.FieldDeletedAt,
		})
	}
	if cmuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: charmmodel.FieldDeletedAt,
		})
	}
	if value, ok := cmuo.mutation.CreatorID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: charmmodel.FieldCreatorID,
		})
	}
	if value, ok := cmuo.mutation.AddedCreatorID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: charmmodel.FieldCreatorID,
		})
	}
	if value, ok := cmuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: charmmodel.FieldName,
		})
	}
	if value, ok := cmuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmmodel.FieldType,
		})
	}
	if value, ok := cmuo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmmodel.FieldType,
		})
	}
	if value, ok := cmuo.mutation.Generation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmmodel.FieldGeneration,
		})
	}
	if value, ok := cmuo.mutation.AddedGeneration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: charmmodel.FieldGeneration,
		})
	}
	_node = &CharmModel{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{charmmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
