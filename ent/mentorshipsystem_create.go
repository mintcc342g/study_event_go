// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study_event_go/ent/mentorshipsystem"
	"study_event_go/types"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MentorshipSystemCreate is the builder for creating a MentorshipSystem entity.
type MentorshipSystemCreate struct {
	config
	mutation *MentorshipSystemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (msc *MentorshipSystemCreate) SetName(s string) *MentorshipSystemCreate {
	msc.mutation.SetName(s)
	return msc
}

// SetID sets the "id" field.
func (msc *MentorshipSystemCreate) SetID(tsi types.MentorshipSystemID) *MentorshipSystemCreate {
	msc.mutation.SetID(tsi)
	return msc
}

// Mutation returns the MentorshipSystemMutation object of the builder.
func (msc *MentorshipSystemCreate) Mutation() *MentorshipSystemMutation {
	return msc.mutation
}

// Save creates the MentorshipSystem in the database.
func (msc *MentorshipSystemCreate) Save(ctx context.Context) (*MentorshipSystem, error) {
	var (
		err  error
		node *MentorshipSystem
	)
	if len(msc.hooks) == 0 {
		if err = msc.check(); err != nil {
			return nil, err
		}
		node, err = msc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MentorshipSystemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = msc.check(); err != nil {
				return nil, err
			}
			msc.mutation = mutation
			if node, err = msc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(msc.hooks) - 1; i >= 0; i-- {
			if msc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = msc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (msc *MentorshipSystemCreate) SaveX(ctx context.Context) *MentorshipSystem {
	v, err := msc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (msc *MentorshipSystemCreate) Exec(ctx context.Context) error {
	_, err := msc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msc *MentorshipSystemCreate) ExecX(ctx context.Context) {
	if err := msc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msc *MentorshipSystemCreate) check() error {
	if _, ok := msc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	return nil
}

func (msc *MentorshipSystemCreate) sqlSave(ctx context.Context) (*MentorshipSystem, error) {
	_node, _spec := msc.createSpec()
	if err := sqlgraph.CreateNode(ctx, msc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = types.MentorshipSystemID(id)
	}
	return _node, nil
}

func (msc *MentorshipSystemCreate) createSpec() (*MentorshipSystem, *sqlgraph.CreateSpec) {
	var (
		_node = &MentorshipSystem{config: msc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mentorshipsystem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: mentorshipsystem.FieldID,
			},
		}
	)
	if id, ok := msc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := msc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mentorshipsystem.FieldName,
		})
		_node.Name = value
	}
	return _node, _spec
}

// MentorshipSystemCreateBulk is the builder for creating many MentorshipSystem entities in bulk.
type MentorshipSystemCreateBulk struct {
	config
	builders []*MentorshipSystemCreate
}

// Save creates the MentorshipSystem entities in the database.
func (mscb *MentorshipSystemCreateBulk) Save(ctx context.Context) ([]*MentorshipSystem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mscb.builders))
	nodes := make([]*MentorshipSystem, len(mscb.builders))
	mutators := make([]Mutator, len(mscb.builders))
	for i := range mscb.builders {
		func(i int, root context.Context) {
			builder := mscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MentorshipSystemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = types.MentorshipSystemID(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mscb *MentorshipSystemCreateBulk) SaveX(ctx context.Context) []*MentorshipSystem {
	v, err := mscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mscb *MentorshipSystemCreateBulk) Exec(ctx context.Context) error {
	_, err := mscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mscb *MentorshipSystemCreateBulk) ExecX(ctx context.Context) {
	if err := mscb.Exec(ctx); err != nil {
		panic(err)
	}
}
